// server/models/TimeEntry.js - FIXED
const mongoose = require('mongoose');

const timeEntrySchema = new mongoose.Schema({
  userId: {
    type: String,
    required: true
    // ❌ REMOVED: index: true (covered by compound indexes)
  },
  projectId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Project',
    required: true
    // ❌ REMOVED: index: true (covered by compound indexes)
  },
  description: {
    type: String,
    maxlength: 500,
    default: ''
  },
  startTime: {
    type: Date,
    required: true
    // ❌ REMOVED: index: true (covered by compound indexes)
  },
  endTime: {
    type: Date,
    validate: {
      validator: function(value) {
        return !value || value > this.startTime;
      },
      message: 'End time must be after start time'
    }
  },
  duration: {
    type: Number,
    min: 0,
    default: 0
  },
  status: {
    type: String,
    enum: ['running', 'paused', 'completed', 'cancelled'],
    default: 'running'
    // ❌ REMOVED: index: true (covered by compound indexes)
  },
  isRunning: {
    type: Boolean,
    default: true
    // ❌ REMOVED: index: true (covered by compound indexes)
  },
  tags: [{
    type: String,
    trim: true
  }],
  billable: {
    type: Boolean,
    default: true
  },
  hourlyRate: {
    type: Number,
    min: 0,
    default: 0
  },
  metadata: {
    source: {
      type: String,
      enum: ['manual', 'desktop_app', 'browser_extension', 'mobile_app', 'api'],
      default: 'manual'
    },
    deviceInfo: {
      platform: String,
      version: String,
      userAgent: String
    },
    windowData: {
      title: String,
      app: String,
      url: String,
      domain: String,
      category: String
    },
    productivity: {
      type: Number,
      min: -1,
      max: 1,
      default: 0
    },
    focus: {
      type: Number,
      min: 0,
      max: 1,
      default: 0.5
    },
    autoGenerated: {
      type: Boolean,
      default: false
    },
    confidence: {
      type: Number,
      min: 0,
      max: 1,
      default: 1
    },
    ruleId: String,
    sessionId: String
  },
  syncInfo: {
    lastSync: Date,
    syncVersion: {
      type: Number,
      default: 1
    },
    conflicts: [{
      field: String,
      resolvedAt: Date,
      resolution: String
    }]
  }
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// ✅ ONLY compound indexes (no single-field duplicates)
timeEntrySchema.index({ userId: 1, startTime: -1 });
timeEntrySchema.index({ userId: 1, projectId: 1, startTime: -1 });
timeEntrySchema.index({ userId: 1, status: 1 });
timeEntrySchema.index({ startTime: 1, endTime: 1 });

// Virtual for calculated revenue
timeEntrySchema.virtual('revenue').get(function() {
  if (!this.duration || !this.hourlyRate) return 0;
  return (this.duration / (1000 * 60 * 60)) * this.hourlyRate;
});

// Virtual for formatted duration
timeEntrySchema.virtual('formattedDuration').get(function() {
  if (!this.duration) return '0m';
  
  const hours = Math.floor(this.duration / (1000 * 60 * 60));
  const minutes = Math.floor((this.duration % (1000 * 60 * 60)) / (1000 * 60));
  
  if (hours > 0) {
    return `${hours}h ${minutes}m`;
  }
  return `${minutes}m`;
});

// Pre-save middleware to calculate duration
timeEntrySchema.pre('save', function(next) {
  if (this.startTime && this.endTime && !this.isModified('duration')) {
    this.duration = this.endTime - this.startTime;
  }
  
  if (this.endTime && this.status === 'running') {
    this.status = 'completed';
    this.isRunning = false;
  }
  
  next();
});

// Instance methods
timeEntrySchema.methods.stop = function() {
  this.endTime = new Date();
  this.status = 'completed';
  this.isRunning = false;
  this.duration = this.endTime - this.startTime;
  return this.save();
};

timeEntrySchema.methods.pause = function() {
  if (this.status === 'running') {
    this.status = 'paused';
    this.isRunning = false;
    return this.save();
  }
  throw new Error('Can only pause running timers');
};

timeEntrySchema.methods.resume = function() {
  if (this.status === 'paused') {
    this.status = 'running';
    this.isRunning = true;
    return this.save();
  }
  throw new Error('Can only resume paused timers');
};

// Static methods
timeEntrySchema.statics.getRunningTimer = function(userId) {
  return this.findOne({ userId, status: 'running' }).populate('projectId');
};

timeEntrySchema.statics.stopAllRunningTimers = function(userId) {
  return this.updateMany(
    { userId, status: 'running' },
    { 
      status: 'completed',
      endTime: new Date(),
      isRunning: false
    }
  );
};

timeEntrySchema.statics.getTimeRange = function(userId, startDate, endDate) {
  return this.find({
    userId,
    startTime: { $gte: startDate, $lte: endDate }
  }).populate('projectId').sort({ startTime: -1 });
};

timeEntrySchema.statics.getTodayEntries = function(userId) {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);
  
  return this.getTimeRange(userId, today, tomorrow);
};

module.exports = mongoose.model('TimeEntry', timeEntrySchema);