// deployment/render.yaml - Render deployment configuration
services:
  - type: web
    name: financial-cents-timer-server
    env: node
    region: oregon
    buildCommand: npm install && npm run build
    startCommand: npm start
    healthCheckPath: /ping
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 3000
      - key: ENABLE_KEEP_ALIVE
        value: true
      - key: KEEP_ALIVE_INTERVAL
        value: 300000
    scaling:
      minInstances: 1
      maxInstances: 1
    resources:
      cpu: 0.5
      memory: 1GB
    rootDir: ./server

# .gitignore - Complete gitignore file
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node_modules
node_modules/
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.local
.env.production

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# Logs
logs/

# Runtime data
pids/

# Electron
desktop-app/dist/
desktop-app/build/

# Extension build
browser-extension/dist/
browser-extension/build/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# docker-compose.yml - Local development with MongoDB
version: '3.8'

services:
  mongodb:
    image: mongo:6.0
    container_name: financial-cents-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: financial-cents-tracker
    volumes:
      - mongodb_data:/data/db
      - ./server/db-init:/docker-entrypoint-initdb.d/
    networks:
      - financial-cents-network

  redis:
    image: redis:7-alpine
    container_name: financial-cents-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - financial-cents-network

volumes:
  mongodb_data:

networks:
  financial-cents-network:
    driver: bridge

# README.md - Complete project documentation
# üí∞ Financial Cents Time Tracker

A comprehensive cross-platform time tracking system with AI-powered window tracking, smart project suggestions, and advanced analytics.

## üöÄ Features

- **Cross-Platform Sync**: Seamlessly track time across desktop, browser, and mobile
- **AI-Powered Window Tracking**: Automatically detect and categorize your work
- **Smart Project Suggestions**: Machine learning-based project recommendations
- **Advanced Analytics**: Detailed productivity insights and patterns
- **Offline-First**: Continue working even without internet connection
- **Real-time Sync**: Changes sync instantly across all devices

## üèóÔ∏è Architecture

### Server (Node.js + MongoDB)
- RESTful API with Express.js
- MongoDB for data storage
- WebSocket for real-time sync
- Advanced analytics engine
- Keep-alive service for Render hosting

### Desktop App (Electron)
- Native window tracking
- System tray integration
- Offline-first approach
- Cross-platform (Windows, macOS, Linux)

### Browser Extension (Chrome)
- Tab tracking and categorization
- Smart rule engine
- Productivity analytics
- Cross-browser sync

## üöÄ Quick Start

### 1. Server Setup

```bash
cd server
npm install
cp .env.example .env
# Edit .env with your MongoDB URI and other settings
npm start
```

### 2. Desktop App

```bash
cd desktop-app
npm install
npm run dev
```

### 3. Browser Extension

1. Open Chrome Extensions (chrome://extensions/)
2. Enable Developer Mode
3. Load unpacked extension from `browser-extension/` folder

### 4. Local Development with Docker

```bash
# Start MongoDB and Redis
docker-compose up -d

# The server will connect to localhost:27017
npm run dev
```

## üìä Core Features

### Window Tracking Rules
Create intelligent rules like:
- "If window contains 'GitHub', track to Development project"
- "If domain is 'figma.com', suggest Design project"
- "During work hours, auto-start timer for Slack"

### Analytics Dashboard
- Productivity scores and trends
- Focus time analysis
- Project breakdowns
- Pattern recognition
- Smart recommendations

### Cross-Platform Sync
- Conflict-free sync across all devices
- Offline queue for unreliable connections
- Real-time updates via WebSocket
- Device-specific optimizations

## üîß Configuration

### Environment Variables

```bash
# Server
NODE_ENV=production
MONGODB_URI=mongodb+srv://user:pass@cluster.mongodb.net/dbname
JWT_SECRET=your-secret-key
ENABLE_KEEP_ALIVE=true

# Keep-alive for Render
KEEP_ALIVE_INTERVAL=300000
PING_ENDPOINTS=["https://uptimerobot.com"]

# Analytics
ENABLE_WINDOW_TRACKING=true
ENABLE_AI_SUGGESTIONS=true
AI_CONFIDENCE_THRESHOLD=0.75
```

### Desktop App Settings

```json
{
  "windowTracking": {
    "enabled": true,
    "checkInterval": 5000,
    "minWindowTime": 30000
  },
  "sync": {
    "autoSync": true,
    "syncInterval": 30000,
    "conflictResolution": "server_wins"
  }
}
```

## üöÄ Deployment

### Render (Recommended)

1. Connect your GitHub repo to Render
2. Use the provided `render.yaml` configuration
3. Set environment variables in Render dashboard
4. Deploy!

### Railway

```bash
railway login
railway init
railway add
railway deploy
```

### Vercel (Serverless)

```bash
vercel
vercel --prod
```

## üì± Mobile Support

While this version focuses on desktop and browser, the API is designed to support mobile apps:

- RESTful API endpoints
- JWT authentication
- Offline sync queues
- Device-specific sync

## üß† AI Features

### Pattern Recognition
- Learns your work patterns
- Detects productivity trends
- Suggests optimal work hours
- Identifies context switching

### Smart Suggestions
- Auto-suggests projects based on context
- Recommends break times
- Identifies unproductive patterns
- Provides actionable insights

## üîí Security

- JWT-based authentication
- Secure API endpoints
- Data encryption at rest
- CORS protection
- Rate limiting

## üìà Analytics

### Productivity Metrics
- Focus time calculation
- Interruption tracking
- Context switching analysis
- Peak productivity hours

### Project Analytics
- Time distribution
- Project profitability
- Team collaboration metrics
- Goal tracking

## ü§ù Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Submit a pull request

## üìÑ License

MIT License - see LICENSE file for details

## üÜò Support

- GitHub Issues for bug reports
- Documentation at [docs/](docs/)
- Email: support@financialcents.com

## üéØ Roadmap

- [ ] Mobile apps (iOS/Android)
- [ ] Team collaboration features
- [ ] Integration with project management tools
- [ ] Advanced AI recommendations
- [ ] Custom reporting
- [ ] API webhooks
- [ ] Third-party integrations